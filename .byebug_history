continue
            expect(json_response["status"]).to eq(400)
response.status
continue
JSON.parse(response.body)
(JSON.parse(response.body)
            post :create, params: {data: {}}
exit
            post :create, params: {data: {}}
continue
            expect(JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys).to eq(json.keys)
x == y
y = json.keys
x = JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys
JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys
json.keys
json.keys.exists?(JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys)
json.keys.include?(JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys)
json.keys.include(JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys)
json.keys.include(JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys_)
json.keys
JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys
            post :create, params: {data: json}
JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys
continue
json.keys
json.keys = JSON.parse(response.body)["data"].transform_keys!(&:to_sym).keys
json == JSON.parse(response.body)["data"].transform_keys!(&:to_sym)
JSON.parse(response.body)["data"].transform_keys!(&:to_sym)
JSON.parse(response.body)["data"]
json
JSON.parse(json.to_s)
json.to_s
json
JSON.parse(json)
JSON.parse(response.body)["data"]
JSON.parse(json)
JSON.parse(response.body)["data"]
json
JSON.parse(response.body)["data"]
JSON.parse(response.body)
json == JSON.parse(response.body)["data"]
json
JSON.parse(response.body)
json
            post :create, params: {data: json}
            expect(JSON.parse(response.body)["data"]).to eq(json)
JSON.parse(response.body)["data"]
JSON.parse(response.body)
            post :create, params: {data: json}
            expect(JSON.parse(response.body)).to eq(json)
JSON.parse(response.body)            expect(JSON.parse(response.body)).to eq(json)
JSON.parse(response.body)
json(response.body)
response.body
response.body.to_json.to_h
response.body.to_json
response.body.to_h
response.body
response.body.to_json
response.body
            post :create, params: {data: json}
response.body
response.to_json
response
            post :create, params: {data: json}
json
exit
ticket_params
continue
ticket_params
exit
      params.permit("data")
ticket_params
exit
continuee
ticket_params
continue
      params.permit(:data).require(:RequestType, :VersionNumber, :RequestNumber, :RequestAction, :DateTimes, :ServiceArea, :Excavator, :ExcavationInfo)
data.keys
      data = {
        RequestType: @ticket.request_type,
        RequestNumber: @ticket.request_number,
        VersionNumber: @ticket.version_number,
        RequestNumber: @ticket.request_number,
        RequestAction: @ticket.request_action,
        DateTimes: @ticket.ticket_dates,
        ServiceArea: ::Contexts::ServiceAreas::Repository.new.load(@ticket.service_areas_id),
        Excavator: ::Contexts::Excavators::Repository.new.load(@ticket.excavator_id),
        ExcavationInfo: ::Contexts::ExcavationDatas::Repository.new.load(@ticket.excavation_info_id)
      }
      data: {
        RequestType: @ticket.request_type,
        RequestNumber: @ticket.request_number,
        VersionNumber: @ticket.version_number,
        RequestNumber: @ticket.request_number,
        RequestAction: @ticket.request_action,
        DateTimes: @ticket.ticket_dates,
        ServiceArea: ::Contexts::ServiceAreas::Repository.new.load(@ticket.service_areas_id),
        Excavator: ::Contexts::Excavators::Repository.new.load(@ticket.excavator_id),
        ExcavationInfo: ::Contexts::ExcavationDatas::Repository.new.load(@ticket.excavation_info_id)
      }
exit
    ticket = Trees::Ticket::Build.new(params["data"]).call
params["data"]
params
    ticket = Trees::Ticket::Build.new(params).call
params.to_h
params.to_json
params
continue
obj
@params
obj
                        obj =ExcavationInfo.create(
                            id: Faker::Number.number(digits: 8),
                            type_of_work: @params[:TypeOfWork],
                            work_done_for: @params[:WorkDoneFor],
                            project_duration: @params[:ProjectDuration],
                            project_start_date: @params[:ProjectStartDate],
                            explosives: @params[:Explosives],
                            horizontal_boring: @params[:UnderGroundOverhead],
                            white_lined: @params[:Whitelined],
                            locate_instructions: @params[:LocateInstructions],
                            remarks: @params[:Remarks],
                            digsite_infos_id: digsite_infos_id
                        )
continue
@params[:UnderGroundOverhead]
@params
@params[:UndergroundOverhead]
                        ExcavationInfo.create(
                            id: Faker::Number.number(digits: 8),
                            type_of_work: @params[:TypeOfWork],
                            work_done_for: @params[:WorkDoneFor],
                            project_duration: @params[:ProjectDuration],
                            project_start_date: @params[:ProjectStartDate],
                            explosives: @params[:Explosives],
                            under_ground_over_head: @params[:UndergroundOverhead],
                            horizontal_boring: @params[:HorizontalBoring],
                            white_lined: @params[:Whitelined],
                            locate_instructions: @params[:LocateInstructions],
                            remarks: @params[:Remarks],
                            digsite_infos_id: digsite_infos_id
                        )
ExcavationInfo
@params[:HorizontalBoring]
@params
continue
@params[:UnderGroundOverhead]
@params
                service_area = Contexts::ServiceAreas::Commands::Build.new.call(
                    primary_service_area_codes_id: primary_service_area.id, 
                    additional_service_area_codes_id: additional_service_area.id
                )
continue
                service_area = Contexts::ServiceAreas::Commands::Build.new.call(
                    primary_service_area_codes_id: primary_service_area.id, 
                    additional_service_area_codes_id: additional_service_area.id
                )
continue
@params[:AdditionalServiceAreaCodes][:SACode]
@params[:AdditionalServiceAreaCodes]["SACode"]
@params[
@params["SACode"]
@params["SACODE"]
@params[:SACODE]
@params[:AdditionalServiceAreaCodes]
@params[:PrimaryServiceAreaCode]@params[:AdditionalServiceAreaCodes]
@params[:PrimaryServiceAreaCode]
                primary_service_area = Contexts::PrimaryServiceAreas::Commands::Build.new(
                    @params[:PrimaryServiceAreaCode]
                ).call
primary_service_area.id
continue
PrimaryServiceAreaCode.find(object.primary_service_area_codes_id)
PrimaryServiceArea.find(object.primary_service_area_codes_id)
object.primary_service_area_codes_id
primaryRepository.load(object.primary_service_area_codes_id)
continue
Contexts::Itois::Repository.new.load(object.itoi_ids)
continue
                                itoi_ids << itoi.id
                                itoi = Contexts::Itois::Commands::Build.new(itoi).call
                                args = itoi.as_json.merge(id: Faker::Number.number(digits: 8))
continue
                        itoi_ids << Contexts::Itois::Commands::Build.new(itoi).call.id
                        itoi = itoi.as_json.merge(id: Faker::Number.number(digits: 8))
itoi.as_json
itoi.to_h
itoi
                        itoi = itoi.to_h.merge(id: Faker::Number.number(digits: 8))
exit
@params
params
continue
      expect(Itoi.find(intersection.itoi_ids).size).to eq(2)
Itoi.find(intersection.itoi_ids)
Itoi.find(id: intersection.itoi_ids)
exit
Itoi.where(id: intersection.itoi_ids)
Itoi.where(id: intersection.itoi_ids).size
Itoi.where(id: intersection.itoi_ids).siz
Itoi.where(intersection.itoi_ids).size
exit
size.size
size = Itoi.where(id: intersection.itoi_ids)
Itoi.where(id: intersection.itoi_ids)
Itoi.where(intersection.itoi_ids)
Itoi.where(intersection.itoi_ids).size
      expect(Itoi.where(intersection.itoi_ids).size).to eq(2)
      expect(Itoi.where(intersection.itoi_ids).size).to be_bigger_than(0)
      expect(Itoi.where(intersection.itoi_ids)).to be_bigger_than(0)
      expect(Itoi.where(intersection.itoi_ids)).to be_valid
      expect(Itoi.find(intersection.itoi_ids)).to be_valid
Itoi.find(id: intersection.itoi_ids)
Itoi.where(id: intersection.itoi_ids)
intersection.itoi_ids
intersection
Intersection.where(id: intersection.itoi_ids)
continue
excavator[:crew_on_site].class
exit
      validation = arrayTypeValidation.call(additional_service_area.sa_code)
      arrayTypeValidation = ->(sa_code) { sa_code.each{|obj| return expect(obj.class).to be(String)} }
      arrayTypeValidation = ->(sa_code) { sa_code.each{|obj| expect(obj.class).to be(String)} }
      validation = arrayTypeValidation.call(additional_service_area.sa_code)
additional_service_area.sa_code
      arrayTypeValidation.call(additional_service_area.sa_code).each do |type|
        expect(type).to be(String)
      end
type
      arrayTypeValidation.call(additional_service_area.sa_code).each do |type|
        expect(type).to be(String)
      end
      arrayTypeValidation.call(additional_service_area.sa_code).include?(String) || !arrayTypeValidation.call(additional_service_area.sa_code).include?(String)
      arrayTypeValidation.call(additional_service_area.sa_code).include?(String) && !arrayTypeValidation.call(additional_service_area.sa_code).include?(String)
additional_service_area.sa_code = ["xd", 1]
      arrayTypeValidation.call(additional_service_area.sa_code).include?(String) && !arrayTypeValidation.call(additional_service_area.sa_code).include?(String)
      arrayTypeValidation.call(additional_service_area.sa_code).include?(String)
      arrayTypeValidation = ->(sa_code) { sa_code.map{|obj| obj.class} }
      arrayTypeValidation.call(additional_service_area.sa_code).include?(String)
      arrayTypeValidation = ->(sa_code) { sa_code.exists?{|obj| obj.class} }
arrayTypeValidation.call(additional_service_area.sa_code)
rrayTypeValidation.call(additional_service_area.sa_code)
      arrayTypeValidation = ->(sa_code) { sa_code.exists?{|obj| obj.class} }
      arrayTypeValidation.call(additional_service_area.sa_code).exists?(String)
arrayTypeValidation.call
      arrayTypeValidation = ->(sa_code) { sa_code.map{|obj| obj.class} }
      arrayTypeValidation.call.exists?(String)
      arrayTypeValidation = ->(sa_code) { sa_code.map{|obj| obj.class} }
      valid_if_array_stirng? = ->(sa_code) { sa_code.map{|obj| obj.class == String} }
valid_string_objects.call(additional_service_area.sa_code)
valid_string_objects.call
      valid_string_objects = ->(sa_code) { sa_code.map{|obj| obj.class == String} }
valid_string_objects.call
