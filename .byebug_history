continue
Itoi.first.id
Itoi.first
Itoi.all
result.itoi_ids
continue
Itoi.all
result.itoi_ids
continue
result.itoi_ids
Itoi.all
itoi
result.itoi_ids
result
continue
result.itoi_ids
result
continue
result
result.itoi_ids
continue
exit
      described_class.new({
        ItoI: [itoi]
      }).call
      described_class.new({
        ItoI: [itoi]
      })
itoi
      itoi = create(:itoi)
continue
      described_class.new({
        ItoI: [itoi]
      })
      itoi = create(:itoi)
continue
create(:itoi)
      result = subject.call
continue
      result = subject.call
itoi.id
itoi
continue
itoi
continue
itoi
continue
result
continue
subject.call(
        contact_id: contact.id,
        field_contact_id: field_contact.id
      )
result      result = subject.call(
        contact_id: contact.id,
        field_contact_id: field_contact.id
      )
result
      expect(result.crew_on_site).to eq(true)
continue
result
continue
      expect(subject.call).to be_a(AdditionalServiceAreaCode)
      expect(subject.call).to be_a(AdditionalServiceAreas)
Contexts::AdditionalServiceAreas::Entity
subject.call.class
subject.call
continue
      @polygon = @ticket.excavation_info.digsite_info.polygon.coordinates.first
      @polygon = @ticket.excavation_info.digsite_info.polygon.coordinates[0]
      @polygon = @ticket.excavation_info.digsite_info.polygon.coordinates[0[
      @polygon = @ticket.excavation_info.digsite_info.polygon.coordinates
continue
@ticket.excavation_info.digsite_info.polygon.coordinates
@ticket.excavation_info.digsite_info.polygon.buffer
@ticket.excavation_info.digsite_info.polygon.area
@ticket.excavation_info.digsite_info.polygon.hash
@ticket.excavation_info.digsite_info.polygon
Float(@ticket.excavation_info.digsite_info.polygon)
@ticket.excavation_info.digsite_info.polygon
        @ticket.excavation_info.digsite_info.polygon.as_json.scan(/(\d+[,.]\d+)/)
        @ticket.excavation_info.digsite_info.polygon.as_json.scan(/^-?(\d+[,.]\d+)/)
        @ticket.excavation_info.digsite_info.polygon.as_json.scan(/(\d+[,.]\d+)/)
@ticket.excavation_info.digsite_info.polygon.as_json.scan(/^-?\d*\.\d+.\d+|\d+\.\d+|\d+/)
@ticket.excavation_info.digsite_info.polygon.as_json
        @ticket.excavation_info.digsite_info.polygon.as_json.scan(/^-?\d*\.\d+.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json.gsub(/^-?\d*\.\d+.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^-?\d*\.{0,1}\d+.\d+|\d+\.\d+|\d+/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^-?\d*\.{0,1}\d+.\d+|\d+\.\d+|\d+/)
continue
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a.map{|item| item.map(&:to_f)}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/(/\-*\d+/),\d+\.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/\-*\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\^[+-]?d+,\d+\.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]^[+-]?\d+,\d+\.\d+|\d+\.\d+|\d+/)
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^[+-]?((\d*\.?\d+)|(\d+\.?\d*))$/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^([+-](?=\.?\d))?(\d+)?(\.\d+)?$/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^-?\d*(\.\d+)?$/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/^-\d+,\d+\.\d+|\d+\.\d+|\d+/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]^-\d+,\d+\.\d+|\d+\.\d+|\d+/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\^-?d+,\d+\.\d+|\d+\.\d+|\d+/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]^-?\d+,\d+\.\d+|\d+\.\d+|\d+/)
continue
contain
exit
contain
RGeo::GeoJSON.encode([[-74.2503655987721, 40.5091442241349], [-74.2504120352793, 40.5091183000754], [-74.2503322759711, 40.5090405104492], [-74.2503655987721, 40.5091442241349]], json_parser: :json)
RGeo::GeoJSON.encode([[-74.2503655987721, 40.5091442241349], [-74.2504120352793, 40.5091183000754], [-74.2503322759711 40.5090405104492], [-74.2503655987721, 40.5091442241349]], json_parser: :json)
RGeo::GeoJSON.encode([-74.2503655987721 40.5091442241349, -74.2504120352793 40.5091183000754, -74.2503322759711 40.5090405104492, -74.2503655987721 40.5091442241349], json_parser: :json)
RGeo::GeoJSON.encode(@params, json_parser: :json)
@polygon = 
        @ticket.excavation_info.digsite_info.polygon
exit
RGeo::GeoJSON.encode(@params, json_parser: :json)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.to_a
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            }
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[-£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            }
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[-£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[-£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/-[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[-£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\-d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[-£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/-[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(-/[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[-£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/-[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
continue
Geocoder.search("Melbourne, Australia")[0].coordinates
Geocoder.search("Melbourne, Australia").coordinates
Geocoder.search("Melbourne, Australia")
Geocoder.search("Melbourne")
Geocoder.search(@polygon)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon
@polygon[0]
Geocoder.search(@polygon[0])
Geocoder.search(@polygon)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
              .map{|element| [element[0].to_f, element[1].to_f]}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
              .map{|element| [element[0], element[1]]}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
              .map{|element| [element[0], longitude: element[1]]}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
              .map{|element| {latitude: element[0], longitude: element[1]}}
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2)
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).map{ |v| v.to_f } }
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
      @polygon = 
        @ticket.excavation_info.digsite_info.polygon.as_json
          .scan(/[£$]\d+,\d+\.\d+|\d+\.\d+|\d+/)
            .each{|item| item.gsub!(/[£$,]/, '')}.each_slice(2).to_a
              .map{|element| {latitude: element[0], longitude: element[1]}}
continue
  area_map [{geometry: {type: "Polygon", coordinates: @polygon}, label: "Hello", tooltip: "World"}] 
@polygon
exit
