continue
exit
                adress_info = Trees::AdressInfo::Build.new(@params[:AddressInfo]).call
exit
Trees::AdressInfo
Trees::AdressInfos
exit
Trees::AdressInfos
Trees::AdressInfo
exit
Trees
Trees::AdressInfo
Trees::AdressInfos
Trees
exit
continue
                        NearStreet.create(
continue
                        TicketDates.create(id: Faker::Number.number(digits: 8), 
                            response_due_date_time: response_due_date_time, 
                            transmission_date_time: transmission_date_time,
                            legal_date_time: legal_date_time,
                            request_taken_date_time: request_taken_date_time,
                            restake_date: restake_date,
                            expiration_date: expiration_date,
                            lpm_metting_accept_due_date: lpm_metting_accept_due_date,
                            overhead_begin_date: overhead_begin_date,
                            overhead_end_date: overhead_end_date
                        )
                    overhead_end_date = @params[:OverheadEndDate]
                    lpm_metting_accept_due_date = @params[:LPMmettingAcceptDueDate]
                    overhead_begin_date = @params[:OverheadBeginDate]
                    expiration_date = @params[:ExpirationDate]
                    restake_date = @params[:RestakeDate]
                    request_taken_date_time = @params[:RequestTakenDateTime]
                    legal_date_time = @params[:LegalDateTime]
                    transmission_date_time = @params[:TransmissionDateTime]
                    response_due_date_time = @params[:ResponseDueDateTime]
continue
exit
@params
                    transmission_date_time = @params[:TransmissionDateTime]
                    response_due_date_time = @params[:ResponseDueDateTime]
                    transmission_date_time = @params[:TransmissionDateTime]
                    legal_date_time = @params[:LegalDateTime]
                    request_taken_date_time = @params[:RequestTakenDateTime]
                    restake_date = @params[:RestakeDate]
                    expiration_date = @params[:ExpirationDate]
                    overhead_begin_date = @params[:OverheadBeginDate]
                    lpm_metting_accept_due_date = @params[:LPMmettingAcceptDueDate]
                    overhead_end_date = @params[:OverheadEndDate]
continue
exit
continue
 @params[:ResponseDueDateTime]
@params
continue
exit
ticket_dates = Contexts::TicketsDates::Commands::Build.new(@params[:DateTimes]).call
continue
exit
TicketDates
TicketDate
            service_area = Trees::ServiceArea::Build.new(@params[:ServiceArea]).call
            excavator = Trees::Excavator::Build.new(@params[:Excavator]).call
            excavation_info = Trees::ExcavationInfo::Build.new(@params[:ExcavationInfo]).call
            ticket_dates = Contexts::TicketDates::Commands::Build.new(@params[:DateTimes]).call
continue
            service_area = Contexts::ServiceAreas::Commands::Build.new.call(
                primary_service_area_codes_id: primary_service_area.id, 
                additional_service_area_codes_id: additional_service_area.id
            )
            primary_service_area = Contexts::PrimaryServiceAreas::Commands::Build.new(
                @params[:PrimaryServiceAreaCode]
            ).call
            additional_service_area = Contexts::AdditionalServiceAreas::Commands::Build.new(
                @params[:AdditionalServiceAreaCodes]
            ).call
@params            additional_service_area = Contexts::AdditionalServiceAreas::Commands::Build.new(
                @params[:AdditionalServiceAreaCodes]
            ).call
            primary_service_area = Contexts::PrimaryServiceAreas::Commands::Build.new(
                @params[:PrimaryServiceAreaCode]
            ).call
@params
continue
                        NearStreet.create(
continue
                        NearStreet.create(
                            id: Faker::Number.number(digits: 8),
                            state: @params[:State],
                            county: @params[:County],
                            place: @params[:Place],
                            prefix: @params[:Prefix],
                            name: @params[:Name],
                            dig_type: @params[:Type],
                            suffix: @params[:Suffix]
                        )
continue
            adress_info = Contexts::AdressInfos::Commands::Build.new(@params).call(
                adress_id: adress.id,
                street_id: street.id    
            )
            adress_info = Contexts::AdressInfos::Commands::Build.new(@params).call(
                adress_digsite_id: adress.id,
                street_digsite_id: street.id    
            )
adress.id
adress
continue
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Adress]
            ).call
continue
exit
@params[:Adress]
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Adress]
            ).call
continue
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Adress]
            ).call
@params
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Addres]
            ).call
continue
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Addres]
            ).call
@params[:Adress]
@params
@params[:Address]
continue
                        AdressDigsite.create(id: Faker::Number.number(digits: 8), adress_num: @params[:AdressNum])
@params
continue
            street = Contexts::StreetDigsites::Commands::Build.new(
                @params[:Street]
            ).call
@params[:Adress]
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Address]
            ).call
@params
adress
@params
continue
exit
continue
@params
continue
@params[:AddressInfo]
@params[:AdressInfo]
@params
continue
exit
@params
                        AdressDigsite.create(id: Faker::Number.number(digits: 8), adress_num: @params[:Adress][:AdressNum])
continue
@params[:AddressInfo]
@params
@params[:AdressInfo]
adress_info = Trees::AdressInfo::Build.new(@params[:AddressInfo]).call
@params
continue
exit
@params
continue
            street = Contexts::StreetDigsites::Commands::Build.new(
                @params[:Street]
            ).call
            adress = Contexts::AdressDigsites::Commands::Build.new(
                @params[:Address]
            ).call
adress
continue
exit
            adress_info = Trees::AdressInfo::Build.new(@params[:AddressInfo]).call
continue
exit
            adress_info = Trees::AdressInfo::Build.new(@params[:AddressInfo]).call
continue
@params[:AddressInfo]
@params[:AdressInfo]
@params
            adress_info = Trees::AdressInfo::Build.new(@params[:AdressInfo]).call
            adress_info = Trees::AdressInfo::Build.new(@params[:Adress]).call
@params
continue
exit
@params[:ResponseDueDateTime].to_time
                    response_due_date_time = new Date(@params[:ResponseDueDateTime].to_time)
@params
@params["ResponseDueDateTime"]
                    response_due_date_time = new Date(@params["ResponseDueDateTime"].to_time)
continue
exit
@params
@params["ResponseDueDateTime"].to_time
                    response_due_date_time = new Date(@params["ResponseDueDateTime"])
continue
exit
ticket_dates = Contexts::TicketDates::Commands::Build.new(@params).call
@params
exit
@params[:DateTimes]
@params[:Date]
@params
            ticket_dates = Contexts::TicketDates::Commands::Build.new(@params).call
@params
params
continue
@params
continue
@adapter.find(*ids)
@adapter
continue
area_map [{geometry: {type: "Polygon", coordinates: [DigsiteInfo.find(589).polygon]}, label: "Hello", tooltip: "World"}]
continue
Rails.application.credentials.config
Rails.application.credentials
continue
exit
ENV['MAPBOX_ACCESS_TOKEN']
continue
object.map {|element|                 [
                    State: element.state,
                    County: element.county,
                    Place: element.place,
                    Prefix: element.prefix,
                    Name: element.name,
                    Type: element.dig_type,
                    Suffix: element.suffix
                ]}
object.map {|element|                 [
                    State: element.state,
                    County: element.county,
                    Place: element.place,
                    Prefix: element.prefix,
                    Name: element.name,
                    Type: element.dig_type,
                    Suffix: element.suffix
                ]
object.size
object
continue
ticket = Ticket.create(id: Faker::Number.within(range: 1..1000), ticket_dates_id: ticket_dates.id, service_areas_id: service_area.id, excavator_id: excavator.id, excavation_info_id: excavation_info.id)
excavation_info = ExcavationInfo.create(id: Faker::Number.within(range: 1..1000), type_of_work: "rpr man hole tops", work_done_for: "gpc", project_duration: "60 days", project_start_date: DateTime.new, explosives: "No", under_ground_over_head: "Underground", horizontal_boring: "Road, Driveway and Sidewalk", white_lined: "No", locate_instructions: "locate along the r/o/w on both sides of the rd - including the rd itself - from inter to inter", remarks: "", digsite_infos_id: digsite_info.id)
digsite_info = DigsiteInfo.create(id: Faker::Number.within(range: 1..1000), look_up_by: "MANUAL", location_type: "Multiple Address", subdivision: "", adress_info_id: adress_info.id, near_streets_id: near_street.id, intersections_id: intersection.id)
Itoi.all
exit
Itoi.all
intersection = Intersection.create(id: Faker::Number.within(range: 1..1000) , itoi_ids: [itoi.id, extra_itoi.id])
.save!
